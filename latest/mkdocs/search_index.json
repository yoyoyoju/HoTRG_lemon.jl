{
    "docs": [
        {
            "location": "/", 
            "text": "HoTRG_lemon.jl Documentation\n\n\npages\n\n\n\n\nHoTRG_lemon.jl Documentation\n\n\nSubModule\n\n\nHoTRG_lemon.SpinModule\n\n\nHoTRG_lemon.LatticeModule\n\n\nHoTRG_lemon.SimulaterModule\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nSubModule\n\n\n#\n\n\nHoTRG_lemon.SpinModule\n \n \nModule\n.\n\n\nSpinModule\n\n\n\n\nStore informations about the spin model.  \n\n\nType list\n\n\n\n\nSpinInfo\n\n\nTrotterInfo for Quantum Spins\n\n\nSpinModel\n\n\nClassicalSpinModel\n\n\nIsingModel\n\n\nPottsModel\n\n\nClockModel\n\n\nQuantumSpinModel\n\n\nQuantumIsingModel\n\n\n\n\nMethod list\n\n\n\n\n\n\nMethods for SpinInfo:\n\n\n\n\nisZeroTemperature\n\n\nisClassical\n\n\ngetmodelname\n\n\ngetStates\n\n\nisSymmetricFactorization\n\n\ngetTemperature\n\n\ngetExternalfield\n\n\ngetEnvParameters\n\n\nsetTemperature!\n\n\nsetExternalfield!\n\n\nsetEnvParameters!\n\n\n\n\nMethods for TrotterInfo\n\n\n\n\n\n\ngetTrotterparameter\n\n\n\n\ngetTrotteriteration\n\n\ngetTrotterlayers\n\n\ngetBeta\n\n\nsetTrotterparameter!\n\n\nsetTrotteriteration!\n\n\niteration2layer\n\n\n\n\nMethods for SpinModel\n\n\n\n\n\n\nbuildSpinSystem\n\n\n\n\ngetMeasureOperator\n\n\ngetFactorW\n\n\nisPottsModel\n\n\ngetHamiltonian\n\n\n\n\nMethods for IsingModel\n\n\n\n\n\n\ninitialize!\n\n\n\n\n\n\nMethods for QuantumSpinModel\n\n\n\n\n\n\ncheckInfo!\n\n\n\n\n\n\nMethods for QuantumIsingModel\n\n\n\n\n\n\ngetFactorWp\n\n\n\n\n\n\n\n\n\n\nTest list\n\n\n\n\ntestSpinInfo\n\n\ntestTrotterInfo\n\n\ntestSpinModel\n\n\ntestIsingModel\n\n\ntestPottsModel\n\n\ntestClockModel\n\n\ntestQuantumIsingModel\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.LatticeModule\n \n \nModule\n.\n\n\nLatticeModule\n\n\n\n\nStore information about the Lattice  \n\n\nType list\n\n\n\n\nLatticeInfo\n\n\nLatttice\n\n\nClassicalLattice,\n\n\nClassical2dLattice,\n\n\nClassical2dSquareLattice,\n\n\nClassical2dFractalLattice,\n\n\nQuantumLattice,\n\n\nQuantum2dLattice,\n\n\nQuantum2dSquareLattice,\n\n\nClassical3dLattice,\n\n\nClassical3dSquareLattice,\n\n\nQuantum2dFractalLattice,\n\n\nFractalLattice,\n\n\n\n\nMethod list\n\n\n\n\ngetDimension\n\n\ngetGeometry\n\n\ngetCoarserate\n\n\ngetLegextension\n\n\ngetQuantumOrClassical\n\n\nisClassical,\n\n\nisTwoDimension,\n\n\nisSquareLattice,\n\n\nisFractalLattice,\n\n\nbuildLattice,\n\n\ninitialize!,\n\n\nisZeroTemperature,\n\n\nisClassical,\n\n\ngetModelname,\n\n\ngetStates,\n\n\nisSymmetricFactorization,\n\n\nisPottsModel,\n\n\ngetHamiltonian,\n\n\ngetTemperature,\n\n\ngetExternalfield,\n\n\ngetEnvParameters,\n\n\nsetTemperature!,\n\n\nsetExternalfield!,\n\n\nsetEnvParameters!,\n\n\ninitialize!,\n\n\ngetTensorT,\n\n\ngetFactorW,\n\n\ngetFactorWp,\n\n\nsetTensorT!,\n\n\nmakeTensorT,\n\n\nmakeFactorWp,\n\n\nmakeTensorQ,\n\n\nbuildClassicalLattice,\n\n\ngetSpaceDimension,\n\n\nbuildQuantumLattice,\n\n\ngetTrotterparameter,\n\n\ngetTrotteriteration,\n\n\ngetTrotterlayers,\n\n\ngetBeta,\n\n\nsetTrotterparameter!,\n\n\nsetTrotterIteration!,\n\n\ngetTensorP,\n\n\ngetTensorQ,\n\n\ngetLegextension,\n\n\ngetHausdorffDim,\n\n\ngetFractalDim,\n\n\nsetTensorP!,\n\n\nsetTensorQ!\n\n\n\n\nTest list\n\n\n\n\ntestlatticeinfo,\n\n\ntestClassical2dSquareLattice,\n\n\ntestClassical2dFractalLattice,\n\n\ntestQuantum2dSquareLattice,\n\n\ntestClassical3dSquareLattice,\n\n\ntestQuantum2dFractalLattice,\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SimulatorModule\n \n \nModule\n.\n\n\nSimulatorModule\n\n\n\n\nSimulator for lattice.  \n\n\nmodifying \nmove this when finished\n\n\n\n\n\n\nsimulator_quantum_2d_fractal_initialiteration.jl   for adding additional iterations for the trotter layer\n\n\n\n\ngetSingularValues\n\n\n\n\n\n\n\n\nType list\n\n\n\n\nSimulator,\n\n\nClassicalSimulator,\n\n\nClassical2dSimulator,\n\n\nClassical3dSimulator,\n\n\nClassical2dSquareSimulator,\n\n\nQuantumSimulator,\n\n\nQuantum2dSimulator,\n\n\nQuantum2dSquareSimulator,\n\n\nClassical3dSquareSimulator,\n\n\nFractalSimulator,\n\n\nClassical2dFractalSimulator,\n\n\nQuantum2dFractalSimulator,\n\n\nQuantum2dFractalInititerSimulator \n- working\n\n\n\n\nMethod list\n\n\n\n\nbuildSimulator, #\n\n\ngetDimM,\n\n\ngetExpectationValue,\n\n\ngetFreeEnergy,\n\n\ngetWholeiteration,\n\n\ngetNormalizationfactors,\n\n\ngetData4Energy,\n\n\ngetCount,\n\n\ngetNumberOfSites,\n\n\ncountUp!,\n\n\ncountDown!,\n\n\nisDone,\n\n\nsetNormalizationfactor!,\n\n\nnormalizeTensor,\n\n\nwriteVector,\n\n\nisZeroTemperature,\n\n\nisClassical,\n\n\ngetModelname,\n\n\ngetStates,\n\n\nisSymmetricFactorization,\n\n\nisPottsModel,\n\n\ngetHamiltonian,\n\n\ngetTemperature,\n\n\ngetExternalfield,\n\n\ngetEnvParameters,\n\n\ngetCoareserate,\n\n\ngetTensorT,\n\n\ngetTensorW,\n\n\ngetMeasureOperator,\n\n\nsetTemperature!,\n\n\nsetExternalfield!,\n\n\nsetTensorT!,\n\n\nsetEnvParameters!,\n\n\ninitializeCount!,\n\n\ngetFirstTerm,\n\n\nrenormalize!,\n\n\ngetTrotterCount,\n\n\ngetSpaceCount,\n\n\ngetTrotterparameter,\n\n\ngetTrotteriteration,\n\n\ngetTrotterlayers,\n\n\ngetBeta, # changed to use trottercount\n\n\nsetTrotterparameter!,\n\n\nsetTrotterIteration!,\n\n\nrenormalize,\n\n\ngetNewTensorT_2dQ,\n\n\ngetTensorU,\n\n\ngetTensorV,\n\n\ngetTenmatMMd,\n\n\nrenormalizeX!,\n\n\nrenormalizeZ!,\n\n\nrenormalizeY!,\n\n\ntruncMatrixU,\n\n\nmatU2tenU,\n\n\nsimulatorTemperature,\n\n\nsimulatorQuantum,\n\n\ngetHausdorffDim,\n\n\ngetFractalDim,\n\n\ngetLegextension,\n\n\ngetTensorP,\n\n\ngetTensorQ,\n\n\ngetCoefficient,\n\n\nsetTensorP!,\n\n\nsetTensorQ!,\n\n\nnormalizeTensor!,\n\n\nsetNorm!,\n\n\nconstructHalf,\n\n\nupdateLocalTensors!,\n\n\ndebug_updateLocalTensors!,\n\n\ngetNewLegTensor,\n\n\ngetNewCaretTensor,\n\n\n\n\nworking_simulator_q2f_re.jl\n\n\n\n\nrenormalizeSpace!,\n\n\nrenormalizeTrotter!,\n\n\ngetTensorUy,\n\n\n\n\nnew version of\n\n\n\n\n\n\nsimulator_quantum_2d_square.jl\n\n\n\n\nupdateCoefficient!,\n\n\nsetCoefficient!,\n\n\ngetCoefficient,\n\n\n\n\nfor debug:\n\n\n\n\ncalculateCoreTensors\n\n\ngetInititeration(simulator::Quantum2dFractalinititerSimulator)\n\n\n\n\nTest list\n\n\n\n\ntestClassical2dSquareSimulator,\n\n\ntestQuantum2dSquareSimulator,\n\n\ntestSimulateTemp,\n\n\ntestClassical3dSquareSimulator,\n\n\ntestClassical2dFractalSimulator,\n\n\ntestQuantum2dFractalSimulator,\n\n\n\n\nsource\n\n\n\n\n\n\nHoTRG_lemon.SpinModule\n\n\nhere\n\n\nthere\n\n\n\n\nTypes\n\n\n#\n\n\nHoTRG_lemon.SpinModule.SpinInfo\n \n \nType\n.\n\n\nSpinInfo{T}(modelcode::AbstractString, factorization::AbstractString, externalfield::T, temperature::T)\n\n\n\n\nStore informations about the spin model.  \n\n\nArguments\n\n\n\n\nmodelcode::AbstractString\n: \n[quantum,classical]_[modelname]_[numberOfState]\n\n\nfactorization::AbstractString\n: \nsym\n or \nasym\n (default: \nasym\n)\n\n\ntemperature::T\n: (default: one(T))\n\n\nexternalfield::T\n: (default: one(T))\n\n\n\n\nExamples\n\n\nmodelcode = \nquantum_ising\n\nfactorization = \nsym\n\nexternalfield = 2.0\ntemperature = 1.5\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization, externalfield, temperature)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization, externalfield)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, externalfield, temperature)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, externalfield)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode)\n\n\n\n\nmodelcode = \nquantum_ising\n\nfactorization = \nsym\n\nexternalfield = 2.0\ntemperature = 1.5\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization, externalfield, temperature)\n\n# output\n\nHoTRG_lemon.SpinModule.SpinInfo{Float64}(\nquantum\n,\nising\n,2,\nsym\n,1.5,2.0)\n\n\n\n\nsource\n\n\n\n\nMethods: SpinModule\n\n\n\n\n\n\nMethods for SpinModule:\n\n\n\n\nisZeroTemperature,\n\n\nisClassical,\n\n\ngetModelname,\n\n\ngetStates,\n\n\nisSymmetricFactorization,\n\n\ngetTemperature,\n\n\ngetExternalfield,\n\n\ngetEnvParameters,\n\n\nsetTemperature!,\n\n\nsetExternalfield!,\n\n\nsetEnvParameters!,\n\n\ntestSpinInfo,\n\n\n\n\n\n\n\n\n#\n\n\nHoTRG_lemon.SpinModule.isZeroTemperature\n \n \nFunction\n.\n\n\nisZeroTemperature(spininfo::SpinInfo)\n\n\n\n\nReturn true when  the system is at the Zero Temperature.  \n\n\njulia\n HoTRG_lemon.SpinModule.isZeroTemperature(spininfo)\nfalse\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.isClassical\n \n \nFunction\n.\n\n\nisClassical(spininfo)\n\n\n\n\nReturn true when the spin is classical, false for quantum.  \n\n\njulia\n HoTRG_lemon.SpinModule.isClassical(spininfo)\nfalse\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.getModelname\n \n \nFunction\n.\n\n\ngetModelname(spininfo)\n\n\n\n\nReturn the model name.  \n\n\njulia\n HoTRG_lemon.SpinModule.getModelname(spininfo)\n\nising\n\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.getStates\n \n \nFunction\n.\n\n\ngetStates(spininfo)\n\n\n\n\nReturn the number of states.   \n\n\njulia\n HoTRG_lemon.SpinModule.getStates(spininfo)\n2\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.isSymmetricFactorization\n \n \nFunction\n.\n\n\nisSymmetricFactorization(spininfo)\n\n\n\n\nReturn \ntrue\n for symmetric factorization  \n\n\njulia\n HoTRG_lemon.SpinModule.isSymmetricFactorization(spininfo)\ntrue\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.getTemperature\n \n \nFunction\n.\n\n\ngetTemperature(spininfo)\n\n\n\n\nReturn the temperature of the spin system.  \n\n\njulia\n HoTRG_lemon.SpinModule.getTemperature(spininfo)\n1.5\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.getExternalfield\n \n \nFunction\n.\n\n\ngetExternalfield(spininfo)\n\n\n\n\nReturn external field.  \n\n\njulia\n HoTRG_lemon.SpinModule.getExternalfield(spininfo)\n2.0\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.getEnvParameters\n \n \nFunction\n.\n\n\ngetEnvParameters(spininfo)\n\n\n\n\nReturn temperature and external field.  \n\n\njulia\n HoTRG_lemon.SpinModule.getEnvParameters(spininfo)\n(1.5,2.0)\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.setTemperature!\n \n \nFunction\n.\n\n\nsetTemperature!(spininfo, temperature)\n\n\n\n\nSet temperature for spininfo to the input temperature.  \n\n\njulia\n HoTRG_lemon.SpinModule.setTemperature!(spininfo, 3.0);\n\njulia\n HoTRG_lemon.SpinModule.getTemperature(spininfo)\n3.0\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.setExternalfield!\n \n \nFunction\n.\n\n\nsetExternalfield!(spininfo, externalfield)\n\n\n\n\nSet spininfo's external field  into the input.  \n\n\njulia\n HoTRG_lemon.SpinModule.setExternalfield!(spininfo, 4.0);\n\njulia\n HoTRG_lemon.SpinModule.getExternalfield(spininfo)\n4.0\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.setEnvParameters!\n \n \nFunction\n.\n\n\nsetEnvParameters!(spininfo, temperature, externalfield)\n\n\n\n\nSet spininfo's temperature and external field.  \n\n\njulia\n HoTRG_lemon.SpinModule.setEnvParameters!(spininfo, 1.2, 3.4);\n\njulia\n HoTRG_lemon.SpinModule.getEnvParameters(spininfo)\n(1.2,3.4)\n\n\n\n\nsource\n\n\n#\n\n\nHoTRG_lemon.SpinModule.testSpinInfo\n \n \nFunction\n.\n\n\ntestSpinInfo()\n\n\n\n\nTest SpinInfo for quantum ising model.  \n\n\ntestSpininfo()\n\n\nsource\n\n\n\n\n\n\nHoTRG_lemon.LatticeModule\n\n\n\n\nTypes\n\n\n#\n\n\nHoTRG_lemon.LatticeModule.Quantum2dFractalLattice\n \n \nType\n.\n\n\nQuantum2dFractalLattice\n\n\n\n\narguments\n\n\n\n\nspinmodel::QuantumSpinModel\n\n\nlegextension::Int\n   default value is one. set zero for the normal square lattice.\n\n\n\n\nsource\n\n\n\n\nMethods:\n\n\n#\n\n\nHoTRG_lemon.SpinModule.initialize!\n \n \nFunction\n.\n\n\ninitialize(lattice::Quantum2dFractalLattice)\n\n\n\n\ninitialize and set tensorT, tensorTtilde, tensorP and tensorQ.  \n\n\nsource\n\n\n\n\n\n\nHoTRG_lemon.SimulaterModule\n\n\n\n\nTypes\n\n\n#\n\n\nHoTRG_lemon.SimulatorModule.Quantum2dFractalSimulator\n \n \nType\n.\n\n\nQuantum2dFractalSimulator\n\n\n\n\narguments\n\n\n\n\nlattice::Quantum2dFractalLattice\n\n\ndimM::Int\n the maximum dimension for the tensors\n\n\n\n\nto do:\n\n\n\n\nbug fixing\n\n\nmerge inititer to this\n\n\n\n\n\n\nThings to check\n\n\n\n\ninitial setup - fixed tensorQ\n\n\n\n\nloop\n\n\n\n\nspatial renormalization\n\n\ntrotter renormalization\n\n\nget measurements\n\n\n\n\n\n\nThe variables to update:\n\n\n\n\ncount\n\n\nnormalization factor\n\n\ncoefficients\n\n\n\n\n\n\n\n\nthings checked :\n\n\n\n\ncount - ok\n\n\ncoefficients - ok\n\n\nprint out Norms - some numbers out standing:  - ok \nq\n or \nex\n and \ney\n   fixed tensorQ : better free energy values\n\n\n\n\nthe  renormalization process\n\n\n\n\ngetting the projectors\n\n\ncontract tensors\n\n\n\n\nafter care\n\n\n\n\nrotating\n\n\n\n\n\n\n\n\n\n\n\n\n* symmetrization\n* setting\n* normalizing\n\n\n\n\nsource\n\n\n\n\nMethods: SimulatorModuel\n\n\n\n\n\n\nMethods to build a Simulator:\n\n\n\n\nbuildSimulator\n\n\n\n\n\n\n\n\n#\n\n\nHoTRG_lemon.SimulatorModule.buildSimulator\n \n \nFunction\n.\n\n\nbuildSimulator\n\n\n\n\nBuild Simulator from \nLattice\n.\n\n\narguments\n\n\n\n\n\n\nlattice\n: \n\n\n\n\nClassical2dSquareLattice\n with  \ndimM\n, \nwholeiteration\n\n\nClassical2dFractalLattice\n with \ndimM\n, \nwholeiteration\n\n\nClassicl3dSquareLattice\n with \ndimM\n, \nwholeiteration\n\n\nQuantum2dSquareLattice\n with \ndimM\n\n\nQuantum2dFractalLattice\n with \ndimM\n\n\ndimM::Int\n: the maximum tensor size\n\n\nwholeiteration::Int\n: For \nClassicalLattice\n. How many times to  iterate.\n\n\n\n\n\n\n\n\nFor \nQuantumLattice\n, it is determined by \ntrotteriteration\n.\n\n\nsource\n\n\n\n\n\n\nMethods to run a simulator:\n\n\n\n\nsimulatorQuantum\n\n\n\n\n\n\n\n\n#\n\n\nHoTRG_lemon.SimulatorModule.simulatorQuantum\n \n \nFunction\n.\n\n\nsimulatorQuantum{T}(fieldrange::LinSpace{T}, simulator::QuantumSimulator{T}; verbose = true, writefile = true, filename = \nData.txt\n)\n\n\n\n\nGet the results from simulator quantum spin system.  \n\n\narguments\n\n\n\n\nfieldrange::LinSpace\n: the range for the external field to be applied.\n\n\nsimulator::QuantumSimulator\n\n\nverbose = true\n: print the results\n\n\nwritefile = true\n: write the  result data into a file\n\n\nfilename = \"Data.txt\"\n: name of the file for the results\n\n\nprintlog  =  \"coef\"\n or \n\"norm\"\n \n\"none\"\n : to print out the log (defalut \"none\")\n\n\n\n\nsource\n\n\nsimulatorQuantum{T}(externalfield::T, simulator::QuantumSimulator{T}; verbose = true, writefile = true, filename = \nData_.txt\n)\n\n\n\n\nSimulate for some external field. Append onto \"Data_.txt\" file.\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nHoTRG_lemon.LatticeModule\n\n\nHoTRG_lemon.SimulatorModule\n\n\nHoTRG_lemon.SpinModule\n\n\nHoTRG_lemon.LatticeModule.Quantum2dFractalLattice\n\n\nHoTRG_lemon.SimulatorModule.Quantum2dFractalSimulator\n\n\nHoTRG_lemon.SpinModule.SpinInfo\n\n\nHoTRG_lemon.SimulatorModule.buildSimulator\n\n\nHoTRG_lemon.SimulatorModule.simulatorQuantum\n\n\nHoTRG_lemon.SpinModule.getEnvParameters\n\n\nHoTRG_lemon.SpinModule.getExternalfield\n\n\nHoTRG_lemon.SpinModule.getModelname\n\n\nHoTRG_lemon.SpinModule.getStates\n\n\nHoTRG_lemon.SpinModule.getTemperature\n\n\nHoTRG_lemon.SpinModule.initialize!\n\n\nHoTRG_lemon.SpinModule.isClassical\n\n\nHoTRG_lemon.SpinModule.isSymmetricFactorization\n\n\nHoTRG_lemon.SpinModule.isZeroTemperature\n\n\nHoTRG_lemon.SpinModule.setEnvParameters!\n\n\nHoTRG_lemon.SpinModule.setExternalfield!\n\n\nHoTRG_lemon.SpinModule.setTemperature!\n\n\nHoTRG_lemon.SpinModule.testSpinInfo", 
            "title": "Home"
        }, 
        {
            "location": "/#hotrg_lemonjl-documentation", 
            "text": "pages   HoTRG_lemon.jl Documentation  SubModule  HoTRG_lemon.SpinModule  HoTRG_lemon.LatticeModule  HoTRG_lemon.SimulaterModule  Index", 
            "title": "HoTRG_lemon.jl Documentation"
        }, 
        {
            "location": "/#submodule", 
            "text": "#  HoTRG_lemon.SpinModule     Module .  SpinModule  Store informations about the spin model.    Type list   SpinInfo  TrotterInfo for Quantum Spins  SpinModel  ClassicalSpinModel  IsingModel  PottsModel  ClockModel  QuantumSpinModel  QuantumIsingModel   Method list    Methods for SpinInfo:   isZeroTemperature  isClassical  getmodelname  getStates  isSymmetricFactorization  getTemperature  getExternalfield  getEnvParameters  setTemperature!  setExternalfield!  setEnvParameters!   Methods for TrotterInfo    getTrotterparameter   getTrotteriteration  getTrotterlayers  getBeta  setTrotterparameter!  setTrotteriteration!  iteration2layer   Methods for SpinModel    buildSpinSystem   getMeasureOperator  getFactorW  isPottsModel  getHamiltonian   Methods for IsingModel    initialize!    Methods for QuantumSpinModel    checkInfo!    Methods for QuantumIsingModel    getFactorWp      Test list   testSpinInfo  testTrotterInfo  testSpinModel  testIsingModel  testPottsModel  testClockModel  testQuantumIsingModel   source  #  HoTRG_lemon.LatticeModule     Module .  LatticeModule  Store information about the Lattice    Type list   LatticeInfo  Latttice  ClassicalLattice,  Classical2dLattice,  Classical2dSquareLattice,  Classical2dFractalLattice,  QuantumLattice,  Quantum2dLattice,  Quantum2dSquareLattice,  Classical3dLattice,  Classical3dSquareLattice,  Quantum2dFractalLattice,  FractalLattice,   Method list   getDimension  getGeometry  getCoarserate  getLegextension  getQuantumOrClassical  isClassical,  isTwoDimension,  isSquareLattice,  isFractalLattice,  buildLattice,  initialize!,  isZeroTemperature,  isClassical,  getModelname,  getStates,  isSymmetricFactorization,  isPottsModel,  getHamiltonian,  getTemperature,  getExternalfield,  getEnvParameters,  setTemperature!,  setExternalfield!,  setEnvParameters!,  initialize!,  getTensorT,  getFactorW,  getFactorWp,  setTensorT!,  makeTensorT,  makeFactorWp,  makeTensorQ,  buildClassicalLattice,  getSpaceDimension,  buildQuantumLattice,  getTrotterparameter,  getTrotteriteration,  getTrotterlayers,  getBeta,  setTrotterparameter!,  setTrotterIteration!,  getTensorP,  getTensorQ,  getLegextension,  getHausdorffDim,  getFractalDim,  setTensorP!,  setTensorQ!   Test list   testlatticeinfo,  testClassical2dSquareLattice,  testClassical2dFractalLattice,  testQuantum2dSquareLattice,  testClassical3dSquareLattice,  testQuantum2dFractalLattice,   source  #  HoTRG_lemon.SimulatorModule     Module .  SimulatorModule  Simulator for lattice.    modifying  move this when finished    simulator_quantum_2d_fractal_initialiteration.jl   for adding additional iterations for the trotter layer   getSingularValues     Type list   Simulator,  ClassicalSimulator,  Classical2dSimulator,  Classical3dSimulator,  Classical2dSquareSimulator,  QuantumSimulator,  Quantum2dSimulator,  Quantum2dSquareSimulator,  Classical3dSquareSimulator,  FractalSimulator,  Classical2dFractalSimulator,  Quantum2dFractalSimulator,  Quantum2dFractalInititerSimulator  - working   Method list   buildSimulator, #  getDimM,  getExpectationValue,  getFreeEnergy,  getWholeiteration,  getNormalizationfactors,  getData4Energy,  getCount,  getNumberOfSites,  countUp!,  countDown!,  isDone,  setNormalizationfactor!,  normalizeTensor,  writeVector,  isZeroTemperature,  isClassical,  getModelname,  getStates,  isSymmetricFactorization,  isPottsModel,  getHamiltonian,  getTemperature,  getExternalfield,  getEnvParameters,  getCoareserate,  getTensorT,  getTensorW,  getMeasureOperator,  setTemperature!,  setExternalfield!,  setTensorT!,  setEnvParameters!,  initializeCount!,  getFirstTerm,  renormalize!,  getTrotterCount,  getSpaceCount,  getTrotterparameter,  getTrotteriteration,  getTrotterlayers,  getBeta, # changed to use trottercount  setTrotterparameter!,  setTrotterIteration!,  renormalize,  getNewTensorT_2dQ,  getTensorU,  getTensorV,  getTenmatMMd,  renormalizeX!,  renormalizeZ!,  renormalizeY!,  truncMatrixU,  matU2tenU,  simulatorTemperature,  simulatorQuantum,  getHausdorffDim,  getFractalDim,  getLegextension,  getTensorP,  getTensorQ,  getCoefficient,  setTensorP!,  setTensorQ!,  normalizeTensor!,  setNorm!,  constructHalf,  updateLocalTensors!,  debug_updateLocalTensors!,  getNewLegTensor,  getNewCaretTensor,", 
            "title": "SubModule"
        }, 
        {
            "location": "/#working_simulator_q2f_rejl", 
            "text": "renormalizeSpace!,  renormalizeTrotter!,  getTensorUy,", 
            "title": "working_simulator_q2f_re.jl"
        }, 
        {
            "location": "/#new-version-of", 
            "text": "", 
            "title": "new version of"
        }, 
        {
            "location": "/#simulator_quantum_2d_squarejl", 
            "text": "updateCoefficient!,  setCoefficient!,  getCoefficient,", 
            "title": "simulator_quantum_2d_square.jl"
        }, 
        {
            "location": "/#for-debug", 
            "text": "calculateCoreTensors  getInititeration(simulator::Quantum2dFractalinititerSimulator)   Test list   testClassical2dSquareSimulator,  testQuantum2dSquareSimulator,  testSimulateTemp,  testClassical3dSquareSimulator,  testClassical2dFractalSimulator,  testQuantum2dFractalSimulator,   source", 
            "title": "for debug:"
        }, 
        {
            "location": "/#hotrg_lemonspinmodule", 
            "text": "here  there", 
            "title": "HoTRG_lemon.SpinModule"
        }, 
        {
            "location": "/#types", 
            "text": "#  HoTRG_lemon.SpinModule.SpinInfo     Type .  SpinInfo{T}(modelcode::AbstractString, factorization::AbstractString, externalfield::T, temperature::T)  Store informations about the spin model.    Arguments   modelcode::AbstractString :  [quantum,classical]_[modelname]_[numberOfState]  factorization::AbstractString :  sym  or  asym  (default:  asym )  temperature::T : (default: one(T))  externalfield::T : (default: one(T))   Examples  modelcode =  quantum_ising \nfactorization =  sym \nexternalfield = 2.0\ntemperature = 1.5\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization, externalfield, temperature)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization, externalfield)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, externalfield, temperature)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, externalfield)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization)\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode)  modelcode =  quantum_ising \nfactorization =  sym \nexternalfield = 2.0\ntemperature = 1.5\nspininfo = HoTRG_lemon.SpinModule.SpinInfo(modelcode, factorization, externalfield, temperature)\n\n# output\n\nHoTRG_lemon.SpinModule.SpinInfo{Float64}( quantum , ising ,2, sym ,1.5,2.0)  source", 
            "title": "Types"
        }, 
        {
            "location": "/#methods-spinmodule", 
            "text": "Methods for SpinModule:   isZeroTemperature,  isClassical,  getModelname,  getStates,  isSymmetricFactorization,  getTemperature,  getExternalfield,  getEnvParameters,  setTemperature!,  setExternalfield!,  setEnvParameters!,  testSpinInfo,     #  HoTRG_lemon.SpinModule.isZeroTemperature     Function .  isZeroTemperature(spininfo::SpinInfo)  Return true when  the system is at the Zero Temperature.    julia  HoTRG_lemon.SpinModule.isZeroTemperature(spininfo)\nfalse  source  #  HoTRG_lemon.SpinModule.isClassical     Function .  isClassical(spininfo)  Return true when the spin is classical, false for quantum.    julia  HoTRG_lemon.SpinModule.isClassical(spininfo)\nfalse  source  #  HoTRG_lemon.SpinModule.getModelname     Function .  getModelname(spininfo)  Return the model name.    julia  HoTRG_lemon.SpinModule.getModelname(spininfo) ising   source  #  HoTRG_lemon.SpinModule.getStates     Function .  getStates(spininfo)  Return the number of states.     julia  HoTRG_lemon.SpinModule.getStates(spininfo)\n2  source  #  HoTRG_lemon.SpinModule.isSymmetricFactorization     Function .  isSymmetricFactorization(spininfo)  Return  true  for symmetric factorization    julia  HoTRG_lemon.SpinModule.isSymmetricFactorization(spininfo)\ntrue  source  #  HoTRG_lemon.SpinModule.getTemperature     Function .  getTemperature(spininfo)  Return the temperature of the spin system.    julia  HoTRG_lemon.SpinModule.getTemperature(spininfo)\n1.5  source  #  HoTRG_lemon.SpinModule.getExternalfield     Function .  getExternalfield(spininfo)  Return external field.    julia  HoTRG_lemon.SpinModule.getExternalfield(spininfo)\n2.0  source  #  HoTRG_lemon.SpinModule.getEnvParameters     Function .  getEnvParameters(spininfo)  Return temperature and external field.    julia  HoTRG_lemon.SpinModule.getEnvParameters(spininfo)\n(1.5,2.0)  source  #  HoTRG_lemon.SpinModule.setTemperature!     Function .  setTemperature!(spininfo, temperature)  Set temperature for spininfo to the input temperature.    julia  HoTRG_lemon.SpinModule.setTemperature!(spininfo, 3.0);\n\njulia  HoTRG_lemon.SpinModule.getTemperature(spininfo)\n3.0  source  #  HoTRG_lemon.SpinModule.setExternalfield!     Function .  setExternalfield!(spininfo, externalfield)  Set spininfo's external field  into the input.    julia  HoTRG_lemon.SpinModule.setExternalfield!(spininfo, 4.0);\n\njulia  HoTRG_lemon.SpinModule.getExternalfield(spininfo)\n4.0  source  #  HoTRG_lemon.SpinModule.setEnvParameters!     Function .  setEnvParameters!(spininfo, temperature, externalfield)  Set spininfo's temperature and external field.    julia  HoTRG_lemon.SpinModule.setEnvParameters!(spininfo, 1.2, 3.4);\n\njulia  HoTRG_lemon.SpinModule.getEnvParameters(spininfo)\n(1.2,3.4)  source  #  HoTRG_lemon.SpinModule.testSpinInfo     Function .  testSpinInfo()  Test SpinInfo for quantum ising model.    testSpininfo()  source", 
            "title": "Methods: SpinModule"
        }, 
        {
            "location": "/#hotrg_lemonlatticemodule", 
            "text": "", 
            "title": "HoTRG_lemon.LatticeModule"
        }, 
        {
            "location": "/#types_1", 
            "text": "#  HoTRG_lemon.LatticeModule.Quantum2dFractalLattice     Type .  Quantum2dFractalLattice  arguments   spinmodel::QuantumSpinModel  legextension::Int    default value is one. set zero for the normal square lattice.   source", 
            "title": "Types"
        }, 
        {
            "location": "/#methods", 
            "text": "#  HoTRG_lemon.SpinModule.initialize!     Function .  initialize(lattice::Quantum2dFractalLattice)  initialize and set tensorT, tensorTtilde, tensorP and tensorQ.    source", 
            "title": "Methods:"
        }, 
        {
            "location": "/#hotrg_lemonsimulatermodule", 
            "text": "", 
            "title": "HoTRG_lemon.SimulaterModule"
        }, 
        {
            "location": "/#types_2", 
            "text": "#  HoTRG_lemon.SimulatorModule.Quantum2dFractalSimulator     Type .  Quantum2dFractalSimulator  arguments   lattice::Quantum2dFractalLattice  dimM::Int  the maximum dimension for the tensors   to do:   bug fixing  merge inititer to this    Things to check   initial setup - fixed tensorQ   loop   spatial renormalization  trotter renormalization  get measurements    The variables to update:   count  normalization factor  coefficients     things checked :   count - ok  coefficients - ok  print out Norms - some numbers out standing:  - ok  q  or  ex  and  ey    fixed tensorQ : better free energy values   the  renormalization process   getting the projectors  contract tensors   after care   rotating       * symmetrization\n* setting\n* normalizing  source", 
            "title": "Types"
        }, 
        {
            "location": "/#methods-simulatormoduel", 
            "text": "Methods to build a Simulator:   buildSimulator     #  HoTRG_lemon.SimulatorModule.buildSimulator     Function .  buildSimulator  Build Simulator from  Lattice .  arguments    lattice :    Classical2dSquareLattice  with   dimM ,  wholeiteration  Classical2dFractalLattice  with  dimM ,  wholeiteration  Classicl3dSquareLattice  with  dimM ,  wholeiteration  Quantum2dSquareLattice  with  dimM  Quantum2dFractalLattice  with  dimM  dimM::Int : the maximum tensor size  wholeiteration::Int : For  ClassicalLattice . How many times to  iterate.     For  QuantumLattice , it is determined by  trotteriteration .  source    Methods to run a simulator:   simulatorQuantum     #  HoTRG_lemon.SimulatorModule.simulatorQuantum     Function .  simulatorQuantum{T}(fieldrange::LinSpace{T}, simulator::QuantumSimulator{T}; verbose = true, writefile = true, filename =  Data.txt )  Get the results from simulator quantum spin system.    arguments   fieldrange::LinSpace : the range for the external field to be applied.  simulator::QuantumSimulator  verbose = true : print the results  writefile = true : write the  result data into a file  filename = \"Data.txt\" : name of the file for the results  printlog  =  \"coef\"  or  \"norm\"   \"none\"  : to print out the log (defalut \"none\")   source  simulatorQuantum{T}(externalfield::T, simulator::QuantumSimulator{T}; verbose = true, writefile = true, filename =  Data_.txt )  Simulate for some external field. Append onto \"Data_.txt\" file.  source", 
            "title": "Methods: SimulatorModuel"
        }, 
        {
            "location": "/#index", 
            "text": "HoTRG_lemon.LatticeModule  HoTRG_lemon.SimulatorModule  HoTRG_lemon.SpinModule  HoTRG_lemon.LatticeModule.Quantum2dFractalLattice  HoTRG_lemon.SimulatorModule.Quantum2dFractalSimulator  HoTRG_lemon.SpinModule.SpinInfo  HoTRG_lemon.SimulatorModule.buildSimulator  HoTRG_lemon.SimulatorModule.simulatorQuantum  HoTRG_lemon.SpinModule.getEnvParameters  HoTRG_lemon.SpinModule.getExternalfield  HoTRG_lemon.SpinModule.getModelname  HoTRG_lemon.SpinModule.getStates  HoTRG_lemon.SpinModule.getTemperature  HoTRG_lemon.SpinModule.initialize!  HoTRG_lemon.SpinModule.isClassical  HoTRG_lemon.SpinModule.isSymmetricFactorization  HoTRG_lemon.SpinModule.isZeroTemperature  HoTRG_lemon.SpinModule.setEnvParameters!  HoTRG_lemon.SpinModule.setExternalfield!  HoTRG_lemon.SpinModule.setTemperature!  HoTRG_lemon.SpinModule.testSpinInfo", 
            "title": "Index"
        }
    ]
}